(()=>{var e={147:e=>{"use strict";e.exports=require("fs")},17:e=>{"use strict";e.exports=require("path")}};var r={};function __nccwpck_require__(t){var s=r[t];if(s!==undefined){return s.exports}var i=r[t]={exports:{}};var _=true;try{e[t](i,i.exports,__nccwpck_require__);_=false}finally{if(_)delete r[t]}return i.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var t={};(()=>{const e=__nccwpck_require__(147);const r=__nccwpck_require__(17);const InitializeExecuter=()=>{let r={};let t=__nccwpck_require__.ab+"option.executer.json";if(e.existsSync(__nccwpck_require__.ab+"option.executer.json")){r=JSON.parse(e.readFileSync(t,{encoding:"utf-8"}))}return r};const InitializeSecrets=t=>{const s=t?.IsShowLogInitializeSecrets||false;if(s){console.log("=====InitializeSecrets=====")}let i={};if("GITHUB_secrets"in process.env){const e=JSON.parse(process.env.GITHUB_secrets);for(const[r,t]of Object.entries(e)){if(r!=="github_token")i[r]=JSON.parse(Buffer.from(t,"base64").toString("utf8"))}}else{let t=__nccwpck_require__.ab+".githubsecrets";if(e.existsSync(__nccwpck_require__.ab+".githubsecrets")){let s=e.readdirSync(t);let _=".githubsecrets.json";for(let n=0;n<s.length;n++){const o=s[n];if(o.endsWith(_)){let s=e.readFileSync(r.join(t,o),{encoding:"utf8"});i[o.replace(_,"")]=JSON.parse(s)}}}}if(s){console.log(JSON.stringify(i,null,"\t"));console.log("=====END:InitializeSecrets=")}return i};const t=InitializeExecuter();const s=InitializeSecrets(t)})();module.exports=t})();